[
  // VSCODE + NEOVIM CUSTOM MOTIONS

  //Translates escape to jj to exit insert mode
  {
    "command": "vscode-neovim.compositeEscape1",
    "key": "j",
    "when": "neovim.mode == insert && editorTextFocus",
    "args": "j"
  },

  // New window
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.newWindow",
    "when": "!explorerViewletFocus && !terminalFocus"
  },

  // ZEN MODE
  {
    "key": "ctrl+z",
    "command": "workbench.action.toggleZenMode"
  },

  // FILE ACTIONS
  // Save current file
  {
    "key": "space w",
    "command": "workbench.action.files.save",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Quit current file or tab
  {
    "key": "space q",
    "command": "workbench.action.closeActiveEditor",
    "when": "(!inputFocus || editorTextFocus) && neovim.mode != 'insert'"
  },
  // Rename current file
  {
    "key": "space r f",
    "command": "fileutils.renameFile",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Format current file
  {
    "key": "space p",
    "command": "editor.action.formatDocument",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Undo & Redo (undo defaults to u)
  {
    "key": "shift+u",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal.r && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
    "args": "<C-r>"
  },

  // COPY & PASTE
  // Content copied with y, x or d is pasted with p
  // Content copied with ctrl+c is pasted with ctrl+shift+v
  // The following rule overrides the default vim pasting behaviour
  // Now pasting use the explicitly yanked text with y, x or d, but never the replaced text
  {
    "key": "p",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal.r && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
    "args": "P"
  },

  // CURSOR NAVIGATION
  // Neovim default: hjkl
  // Go to with :linenumber (ex. :10)
  // Next word
  {
    "key": "shift+l",
    "command": "cursorWordRight",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Previous word
  {
    "key": "shift+h",
    "command": "cursorWordLeft",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Go to start of line
  {
    "key": "space h",
    "command": "cursorHome",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Go to end of line
  {
    "key": "space l",
    "command": "cursorEnd",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Go to top of file
  {
    "key": "space k",
    "command": "cursorTop",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Go to bottom of file
  {
    "key": "space j",
    "command": "cursorBottom",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Go to next ocurrence
  {
    "key": "n",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.mode == 'normal'",
    "args": "*"
  },
  // Go to previous ocurrence
  {
    "key": "shift+n",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.mode == 'normal'",
    "args": "#"
  },
  // Move line up
  {
    "key": "shift+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // Move line down
  {
    "key": "shift+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // Add line up
  {
    "key": "shift+o",
    "command": "editor.action.insertLineBefore",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // Add line down
  {
    "key": "o",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // Duplicate lines down
  {
    "key": "space d",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Insert additional cursor above
  {
    "key": "alt+k",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // Insert additional cursor below
  {
    "key": "alt+j",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // Add cursor to line ends
  //   {
  //     "key": "space e",
  //     "command": "editor.action.insertCursorAtEndOfEachLineSelected",
  //     "when": "editorTextFocus && neovim.mode == 'visual'"
  //   },
  // Select all
  {
    "key": "space a",
    "command": "editor.action.selectAll",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // Outdent lines
  {
    "key": ",",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Indent lines
  {
    "key": ".",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Toggle comment
  {
    "key": "space c",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },

  // EDITOR GROUPS NAVIGATION

  // Switch between editor tabs
  {
    "key": "alt+l",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.previousEditor"
  },
  // Split editor vertically
  {
    "key": "alt+v",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal.r && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
    "args": [":vsplit<CR>"]
  },
  // Split editor horizontally
  {
    "key": "alt+s",
    "command": "vscode-neovim.send",
    "when": "editorTextFocus && neovim.ctrlKeysNormal.r && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
    "args": [":split<CR>"]
  },
  // Switch between opened editor groups
  {
    "key": "alt+shift+k",
    "command": "workbench.action.focusAboveGroup"
  },
  {
    "key": "alt+shift+j",
    "command": "workbench.action.focusBelowGroup"
  },
  {
    "key": "alt+shift+h",
    "command": "workbench.action.focusLeftGroup"
  },
  {
    "key": "alt+shift+l",
    "command": "workbench.action.focusRightGroup"
  },

  // SEARCHING AND REFACTORING
  // Search files
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen"
  },
  // Find
  {
    "key": "space f f",
    "command": "actions.find",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Find & Replace
  {
    "key": "space f r",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },
  // Quickfix
  {
    "key": "space .",
    "command": "editor.action.quickFix",
    "when": "editorTextFocus && (neovim.mode == 'normal' || neovim.mode == 'visual')"
  },
  // Show options
  {
    "key": "space o",
    "command": "editor.action.showContextMenu",
    "when": "editorTextFocus && neovim.mode != 'insert'"
  },

  // Rename declaration
  {
    "key": "space r d",
    "command": "editor.action.rename",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // Go to definition
  {
    "key": "space g d",
    "command": "editor.action.revealDefinition",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // See definition (pop up)
  {
    "key": "space s d",
    "command": "editor.action.showDefinitionPreviewHover",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // Select next suggestion
  {
    "key": "alt+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion && neovim.mode == 'normal'"
  },
  // Select prev suggestion
  {
    "key": "alt+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion && neovim.mode == 'normal'"
  },

  // EXPLORER
  // Neovim defaults
  //   r	renameFile
  //   d	deleteFile
  //   y	filesExplorer.copy
  //   x	filesExplorer.cut
  //   p	filesExplorer.paste
  //   v	explorer.openToSide
  //   a	explorer.newFile
  //   A	explorer.newFolder
  //   R	workbench.files.action.refreshFilesExplorer
  // Focus on file explorer
  {
    "key": "alt+e",
    "command": "workbench.explorer.fileView.focus",
    "when": "neovim.mode == 'normal'"
  },
  // Focus on editor
  {
    "key": "alt+e",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "filesExplorerFocus && !inputFocus && neovim.mode == 'normal'"
  },

  // TERMINAL

  // Toggle terminal
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.togglePanel"
  },
  // Create new terminal
  {
    "key": "ctrl+n",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus"
  },
  // Kill terminal
  {
    "key": "ctrl+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  // Go to next terminal
  {
    "key": "ctrl+j",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  // Go to previous terminal
  {
    "key": "ctrl+k",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  // Go to previous terminal tab
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+l",
    "command": "toggleFindInSelection",
    "when": "editorFocus"
  },
  {
    "key": "alt+l",
    "command": "-toggleFindInSelection",
    "when": "editorFocus"
  }
]
